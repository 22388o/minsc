use crate::ast::{Expr, Stmt, self};
use crate::util::{concat, parse_str_prefix};

grammar;

// Enable `//` comments
match {
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { },
    _,
}

pub Program: Expr = Block;

Block: Expr = <stmts:Stmt*> <ret:Return> =>
  ast::Block { stmts,  return_value: ret.into() }.into();

Stmt: Stmt = {
  FnDef,
  Assign,
}

Expr: Expr = {
  SimpleExpr,
  And,
  Or,
};

SimpleExpr: Expr = {
  TermWord,
  Call,
  Thresh,
  BlockExpr,
  WithProb,
  Array,
  ArrayAccess,
  Duration,
  Paren<And>,
  Paren<Or>,
  Paren<SimpleExpr>,
};

Return: Expr = {
  Expr, // the preferred form
  "return" <Expr> ";"?,
};

// Expressions

Ident: String = <s:r"[\w$]+"> => (<>).to_owned();

TermWord: Expr = Ident => ast::TermWord(<>.into()).into();

Call: Expr = <ident:Ident> "(" <args:List0<Expr, ",">> ")" =>
    ast::Call { ident, args }.into();

And: Expr = <List2<SimpleExpr, "&&">> => ast::And(<>).into();
Or: Expr = <List2<SimpleExpr, "||">> => ast::Or(<>).into();

Thresh: Expr = <thresh:TermWord> "of" <policies:SimpleExpr> =>
  ast::Thresh { thresh: thresh.into(), policies: policies.into() }.into();

BlockExpr: Expr = "{" <Block> "}" => <>.into();

WithProb: Expr = <prob:TermWord> "@" <expr:SimpleExpr> =>
    ast::WithProb { prob: prob.into(), expr: expr.into() }.into();

Array: Expr = "[" <List0<Expr, ",">> "]" =>
  ast::Array(<>).into();

ArrayAccess: Expr = <array:ArrayAccessLHS> "." <index:TermWord> =>
  ast::ArrayAccess { array: array.into(), index: index.into() }.into();

// TODO support all Paren<Expr>
ArrayAccessLHS = { TermWord, Call, Array, BlockExpr };

// Statements

Assign: Stmt = "let"? <assigns:List1<Assignment, ",">> ";" =>
    ast::Assign(assigns).into();

Assignment: ast::Assignment = <lhs:Ident> "=" <rhs:Expr> =>
    ast::Assignment { lhs, rhs };

FnDef: Stmt = {
    "fn" <ident:Ident> "(" <signature:List0<Ident, ",">> ")" "=" <body:Expr> ";" =>
        ast::FnDef { ident, signature, body }.into(),
    "fn" <ident:Ident> "(" <signature:List0<Ident, ",">> ")" "{" <body:Block> "}" ";"? =>
        ast::FnDef { ident, signature, body }.into(),
}

// Duration
Duration = { DurationBlocks, DurationClock };

DurationBlocks: Expr = r"\d+ blocks?" =>
  ast::Duration::BlockHeight(parse_str_prefix(<>)).into();

DurationClock: Expr = <blockwise:"blockwise"?> <parts:DurationClockPart+> =>
  ast::Duration::BlockTime { parts, blockwise: blockwise.is_some() }.into();

DurationClockPart: ast::DurationPart = {
  r"(\d+(?:\.\d+)?) years?" => ast::DurationPart::Years(parse_str_prefix(<>)),
  r"(\d+(?:\.\d+)?) months?" => ast::DurationPart::Months(parse_str_prefix(<>)),
  r"(\d+(?:\.\d+)?) weeks?" => ast::DurationPart::Weeks(parse_str_prefix(<>)),
  r"(\d+(?:\.\d+)?) days?" => ast::DurationPart::Days(parse_str_prefix(<>)),
  r"(\d+(?:\.\d+)?) hours?" => ast::DurationPart::Hours(parse_str_prefix(<>)),
  r"(\d+(?:\.\d+)?) min(ute)?s?" => ast::DurationPart::Minutes(parse_str_prefix(<>)),
  r"(\d+(?:\.\d+)?) sec(ond)?s?" => ast::DurationPart::Seconds(parse_str_prefix(<>)),
}

// Helpers

// A `S`-separated list of zero or more `T` values
List0<T, S>: Vec<T> = <l:(<T> S)*> <t:T?> => concat(l, t);

// A `S`-separated list of one or more `T` values
List1<T, S>: Vec<T> = <l:(<T> S)*> <t:T> => concat(l, Some(t));

// A `S`-separated list of two or more `T` values
List2<T, S>: Vec<T> = <l:(<T> S)+> <t:T> => concat(l, Some(t));

Paren<T> = "(" <T> ")";
