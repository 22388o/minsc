use crate::ast::{Expr, Stmt, self};
use crate::util::concat;

grammar;

pub Program: Expr = Block;

Block: Expr = <stmts:Stmt*> <ret:Expr> =>
  ast::Block { stmts,  return_value: ret.into() }.into();

Stmt: Stmt = {
  FnDef,
  Assign,
}

Expr: Expr = {
  SimpleExpr,
  And,
  Or,
};

SimpleExpr: Expr = {
  TermWord,
  Call,
  BlockExpr,
  WithProb,
  Paren<And>,
  Paren<Or>,
  Paren<SimpleExpr>,
};

// Expressions

Ident: String = <s:r"[\w$]+"> => (<>).to_owned();

TermWord: Expr = Ident => ast::TermWord(<>.into()).into();

Call: Expr = <ident:Ident> "(" <args:List0<Expr, ",">> ")" =>
    ast::Call { ident, args }.into();

And: Expr = <List2<SimpleExpr, "&&">> => ast::And(<>).into();
Or: Expr = <List2<SimpleExpr, "||">> => ast::Or(<>).into();

BlockExpr: Expr = "{" <Block> "}" => <>.into();

WithProb: Expr = <prob:TermWord> "@" <expr:SimpleExpr> =>
    ast::WithProb { prob: prob.into(), expr: expr.into() }.into();

// Statements

Assign: Stmt = "let"? <assigns:List1<(<Ident> "=" <Expr>), ",">> ";" =>
    ast::Assign(assigns.into_iter().map(|a| ast::Assignment { lhs: a.0, rhs: a.1 }).collect()).into();

FnDef: Stmt = {
    "fn" <ident:Ident> "(" <signature:List0<Ident, ",">> ")" "=" <body:Expr> ";" =>
        ast::FnDef { ident, signature, body }.into(),
    "fn" <ident:Ident> "(" <signature:List0<Ident, ",">> ")" "{" <body:Block> "}" ";"? =>
        ast::FnDef { ident, signature, body }.into(),
}

// A `S`-separated list of zero or more `T` values
List0<T, S>: Vec<T> = <l:(<T> S)*> <t:T?> => concat(l, t);

// A `S`-separated list of one or more `T` values
List1<T, S>: Vec<T> = <l:(<T> S)*> <t:T> => concat(l, Some(t));

// A `S`-separated list of two or more `T` values
List2<T, S>: Vec<T> = <l:(<T> S)+> <t:T> => concat(l, Some(t));

Paren<T>: Expr = "(" <T> ")";
